{"ast":null,"code":"var _jsxFileName = \"/Users/howardwang/Desktop/udemy-challenge/client/src/Question.jsx\";\nimport React from 'react';\nimport './styles/styles.css'; //Basic component that contains a state and will hold information on each question\n\nclass Question extends React.Component {\n  //questions will have a question id, question string, option array,\n  //currently selected option (selected), answer index\n  constructor(props) {\n    super(props);\n    this.state = {\n      questionID: this.props.questionID,\n      question: null,\n      options: [],\n      selected: -1,\n      answer: null\n    };\n  } //backend api call for populating question with necessary information\n\n\n  componentDidMount() {\n    fetch(`/getQuestion/${this.state.questionID}`).then(res => res.json()).then(res => {\n      //questions recieved as an obj,\n      //will convert to array for easier handling\n      let options = [];\n\n      for (var optionNum in res.options) {\n        options.push(res.options[optionNum]);\n      } //update state based on fetch\n\n\n      this.setState({\n        question: res.question,\n        options: options,\n        answer: res.answer\n      });\n    });\n  }\n\n  handleOnChange(e) {\n    let selected = this.state.selected;\n    if (selected === e.target.value) selected = -1;else selected = e.target.value;\n    this.setState({\n      selected: selected\n    });\n  }\n\n  handleOnClick(e) {\n    var pass = this.state.selected == this.state.answer || this.state.answer == \"PASS\";\n    this.props.onQuestionChange(pass);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"question\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 6\n      }\n    }, this.state.question), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"options\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 6\n      }\n    }, this.state.options.map((item, i) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        id: \"check:\" + i,\n        value: i,\n        onChange: e => this.handleOnChange(e),\n        checked: this.state.selected == i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 10\n        }\n      }), /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"check:\" + i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 10\n        }\n      }, item));\n    }))), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"next-button\",\n      type: \"button\",\n      value: \"Next\",\n      onClick: e => this.handleOnClick(e),\n      disabled: this.state.selected == -1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 5\n      }\n    }));\n  }\n\n}\n\nexport default Question;","map":{"version":3,"sources":["/Users/howardwang/Desktop/udemy-challenge/client/src/Question.jsx"],"names":["React","Question","Component","constructor","props","state","questionID","question","options","selected","answer","componentDidMount","fetch","then","res","json","optionNum","push","setState","handleOnChange","e","target","value","handleOnClick","pass","onQuestionChange","render","map","item","i"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './styles/styles.css';\n\n//Basic component that contains a state and will hold information on each question\nclass Question extends React.Component {\n\n\t//questions will have a question id, question string, option array,\n\t//currently selected option (selected), answer index\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tquestionID: this.props.questionID,\n\t\t\tquestion: null,\n\t\t\toptions: [],\n\t\t\tselected: -1,\n\t\t\tanswer: null,\n\t\t};\n\t}\n\n\t//backend api call for populating question with necessary information\n\tcomponentDidMount() {\n\t\tfetch(`/getQuestion/${this.state.questionID}`)\n\t\t.then(res => res.json())\n\t\t.then(res => {\n\n\t\t\t//questions recieved as an obj,\n\t\t\t//will convert to array for easier handling\n\t\t\tlet options = [];\n\t\t\tfor(var optionNum in res.options) {\n\t\t\t\toptions.push(res.options[optionNum]);\n\t\t\t}\n\n\t\t\t//update state based on fetch\n\t\t\tthis.setState({\n\t\t\t\tquestion: res.question,\n\t\t\t\toptions: options,\n\t\t\t\tanswer: res.answer,\n\t\t\t});\n\t\t});\n \t}\n\n \thandleOnChange(e) {\n\n \t\tlet selected = this.state.selected;\n \t\tif(selected === e.target.value) selected = -1;\n \t\telse selected = e.target.value;\n\n \t\tthis.setState({\n \t\t\tselected: selected\n \t\t});\n \t}\n\n\thandleOnClick(e) {\n\t\tvar pass = this.state.selected == this.state.answer || this.state.answer == \"PASS\";\n\t\tthis.props.onQuestionChange(pass);\n \t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"flex-wrapper\">\n\t\t\t\t<div className=\"question\">\n\t\t\t\t\t<h1>{this.state.question}</h1>\n\t\t\t\t\t<br/>\n\t\t\t\t\t<div className=\"options\">\n\t\t\t\t\t\t{this.state.options.map((item, i) => {\n\t\t\t\t\t\t\treturn <div key={i}>\n\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\tid={\"check:\" + i}\n\t\t\t\t\t\t\t\t\t\tvalue={i}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => this.handleOnChange(e)}\n\t\t\t\t\t\t\t\t\t\tchecked={this.state.selected == i}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<label htmlFor={\"check:\" + i}>{item}</label>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<input className=\"next-button\" type=\"button\" value=\"Next\" \n\t\t\t\tonClick={(e) => this.handleOnClick(e)} disabled={this.state.selected == -1}/>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Question;"]},"metadata":{},"sourceType":"module"}