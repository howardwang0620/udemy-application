{"version":3,"sources":["Question.jsx","App.jsx","index.jsx"],"names":["Question","props","state","questionID","question","options","selected","answer","fetch","this","then","res","json","optionNum","push","setState","e","target","value","pass","onQuestionChange","className","map","item","i","key","type","id","onChange","handleOnChange","checked","htmlFor","onClick","handleOnClick","disabled","React","Component","App","numQuestions","questionsAnswered","correctlyAnswered","currentQuestion","bool","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMA4FeA,G,wDApFd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IAEDC,MAAQ,CACZC,WAAY,EAAKF,MAAME,WACvBC,SAAU,KACVC,QAAS,GACTC,UAAW,EACXC,OAAQ,MARS,E,gEAaE,IAAD,OACnBC,MAAM,gBAAD,OAAiBC,KAAKP,MAAMC,aAChCO,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GAIL,IAAIN,EAAU,GACd,IAAI,IAAIQ,KAAaF,EAAIN,QACxBA,EAAQS,KAAKH,EAAIN,QAAQQ,IAI1B,EAAKE,SAAS,CACbX,SAAUO,EAAIP,SACdC,QAASA,EACTE,OAAQI,EAAIJ,c,qCAOCS,GAId,IAAIV,EAAWG,KAAKP,MAAMI,SACMA,EAA7BA,IAAaU,EAAEC,OAAOC,OAAmB,EAC5BF,EAAEC,OAAOC,MAEzBT,KAAKM,SAAS,CACbT,SAAUA,M,oCAKCU,GACb,IAAIG,EAAOV,KAAKP,MAAMI,UAAYG,KAAKP,MAAMK,QAA+B,QAArBE,KAAKP,MAAMK,OAClEE,KAAKR,MAAMmB,iBAAiBD,K,+BAInB,IAAD,OACR,OACC,yBAAKE,UAAU,gBACd,yBAAKA,UAAU,YACd,4BAAKZ,KAAKP,MAAME,UAChB,6BACA,yBAAKiB,UAAU,WACbZ,KAAKP,MAAMG,QAAQiB,KAAI,SAACC,EAAMC,GAC9B,OAAO,yBAAKC,IAAKD,GACf,2BACCE,KAAK,WACLC,GAAI,SAAWH,EACfN,MAAOM,EACPI,SAAU,SAACZ,GAAD,OAAO,EAAKa,eAAeb,IACrCc,QAAS,EAAK5B,MAAMI,UAAYkB,IAEjC,2BAAOO,QAAS,SAAWP,GAAID,SAKpC,2BAAOF,UAAU,cAAcK,KAAK,SAASR,MAAM,OACnDc,QAAS,SAAChB,GAAD,OAAO,EAAKiB,cAAcjB,IAAIkB,UAAkC,GAAxBzB,KAAKP,MAAMI,gB,GAlFzC6B,IAAMC,YC0CdC,E,kDAvCb,aAAe,IAAD,8BACZ,gBAGKnC,MAAQ,CACXoC,aAAc,EACdC,kBAAmB,EACnBC,kBAAmB,EACnBC,gBAAiB,GARP,E,6DAaGC,GAEfjC,KAAKM,UAAS,SAACb,GAAD,MAAY,CACxBqC,kBAAmBrC,EAAMqC,kBAAoB,EAC7CC,kBAAmBE,EAAOxC,EAAMsC,kBAAoB,EAAItC,EAAMsC,kBAC9DC,gBAAiBvC,EAAMuC,gBAAkB,Q,+BAMnC,IAAD,OACP,OACE,yBAAKpB,UAAU,OACXZ,KAAKP,MAAMuC,gBAAkBhC,KAAKP,MAAMoC,aACtC,kBAAC,EAAD,CAAUb,IAAKhB,KAAKP,MAAMuC,gBAAiBtC,WAAYM,KAAKP,MAAMuC,gBAC5DrB,iBAAkB,SAACsB,GAAD,OAAU,EAAKtB,iBAAiBsB,MACxD,yBAAKrB,UAAU,gBACb,2CAAiBZ,KAAKP,MAAMsC,kBAA5B,IAAgD/B,KAAKP,MAAMoC,aAA3D,mC,GAlCIH,IAAMC,WCCxBO,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.5b7190ce.chunk.js","sourcesContent":["import React from 'react';\nimport './styles/styles.css';\n\n//Basic component that contains a state and will hold information on each question\nclass Question extends React.Component {\n\n\t//questions will have a question id, question string, option array,\n\t//currently selected option (selected), answer index\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tquestionID: this.props.questionID,\n\t\t\tquestion: null,\n\t\t\toptions: [],\n\t\t\tselected: -1,\n\t\t\tanswer: null,\n\t\t};\n\t}\n\n\t//backend api call for populating question with necessary information\n\tcomponentDidMount() {\n\t\tfetch(`/getQuestion/${this.state.questionID}`)\n\t\t.then(res => res.json())\n\t\t.then(res => {\n\n\t\t\t//questions recieved as an obj,\n\t\t\t//will convert to array for easier handling\n\t\t\tlet options = [];\n\t\t\tfor(var optionNum in res.options) {\n\t\t\t\toptions.push(res.options[optionNum]);\n\t\t\t}\n\n\t\t\t//update state based on fetch\n\t\t\tthis.setState({\n\t\t\t\tquestion: res.question,\n\t\t\t\toptions: options,\n\t\t\t\tanswer: res.answer,\n\t\t\t});\n\t\t});\n \t}\n\n \t//handles on change for check button\n \t//makes sure at most one button is selected at a time\n \thandleOnChange(e) {\n\n \t\t//use selected to determine what index of options to point towards\n \t\t//point towards -1 if selected value is not changed (clicked on twice)\n \t\tlet selected = this.state.selected;\n \t\tif(selected === e.target.value) selected = -1;\n \t\telse selected = e.target.value;\n\n \t\tthis.setState({\n \t\t\tselected: selected\n \t\t});\n \t}\n\n \t//passes boolean (T if selected answer was correct, F if not) to callback function for handling\n\thandleOnClick(e) {\n\t\tvar pass = this.state.selected == this.state.answer || this.state.answer == \"PASS\";\n\t\tthis.props.onQuestionChange(pass);\n \t}\n\n \t//renders the question, array of options, and a next button\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"flex-wrapper\">\n\t\t\t\t<div className=\"question\">\n\t\t\t\t\t<h1>{this.state.question}</h1>\n\t\t\t\t\t<br/>\n\t\t\t\t\t<div className=\"options\">\n\t\t\t\t\t\t{this.state.options.map((item, i) => {\n\t\t\t\t\t\t\treturn <div key={i}>\n\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\tid={\"check:\" + i}\n\t\t\t\t\t\t\t\t\t\tvalue={i}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => this.handleOnChange(e)}\n\t\t\t\t\t\t\t\t\t\tchecked={this.state.selected == i}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<label htmlFor={\"check:\" + i}>{item}</label>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<input className=\"next-button\" type=\"button\" value=\"Next\" \n\t\t\t\tonClick={(e) => this.handleOnClick(e)} disabled={this.state.selected == -1}/>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Question;","import React from 'react';\nimport Question from './Question.jsx';\nimport './styles/index.css';\n\nclass App extends React.Component {\n\n  //Class App will hold question answering data\n  constructor() {\n    super();\n\n    //explanatory variables -> will hold only 5 questions\n    this.state = {\n      numQuestions: 5,\n      questionsAnswered: 0,\n      correctlyAnswered: 0,\n      currentQuestion: 0,\n    };\n  }\n\n  //callback function for submit answer button press\n  onQuestionChange(bool) {\n    //increment to the next question and rerender\n    this.setState((state) => ({\n      questionsAnswered: state.questionsAnswered + 1,\n      correctlyAnswered: bool ? state.correctlyAnswered + 1 : state.correctlyAnswered,\n      currentQuestion: state.currentQuestion + 1\n    }));\n  }\n\n\n  //render a question or quiz results based on index of current question\n  render() {\n    return (\n      <div className=\"App\">\n        { this.state.currentQuestion < this.state.numQuestions \n          ? <Question key={this.state.currentQuestion} questionID={this.state.currentQuestion} \n                  onQuestionChange={(bool) => this.onQuestionChange(bool)}/>\n          : <div className=\"flex-wrapper\"> \n              <h1>You scored: {this.state.correctlyAnswered}/{this.state.numQuestions} ðŸŽ‰ðŸŽ‰</h1>\n            </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}